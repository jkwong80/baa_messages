#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SensorType:
  radiation = 1
  temperature = 2

  _VALUES_TO_NAMES = {
    1: "radiation",
    2: "temperature",
  }

  _NAMES_TO_VALUES = {
    "radiation": 1,
    "temperature": 2,
  }


class Spectrum:
  """
  Attributes:
   - sensor_id
   - sample_time
   - timestamp
   - real_time
   - live_time
   - adc_channel_counts
   - bin_energies
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sensor_id', None, None, ), # 1
    (2, TType.I64, 'sample_time', None, None, ), # 2
    (3, TType.STRING, 'timestamp', None, None, ), # 3
    (4, TType.I64, 'real_time', None, None, ), # 4
    (5, TType.I64, 'live_time', None, None, ), # 5
    (6, TType.LIST, 'adc_channel_counts', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'bin_energies', (TType.DOUBLE,None), None, ), # 7
  )

  def __init__(self, sensor_id=None, sample_time=None, timestamp=None, real_time=None, live_time=None, adc_channel_counts=None, bin_energies=None,):
    self.sensor_id = sensor_id
    self.sample_time = sample_time
    self.timestamp = timestamp
    self.real_time = real_time
    self.live_time = live_time
    self.adc_channel_counts = adc_channel_counts
    self.bin_energies = bin_energies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sample_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.real_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.live_time = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.adc_channel_counts = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.adc_channel_counts.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.bin_energies = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readDouble()
            self.bin_energies.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Spectrum')
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 1)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.sample_time is not None:
      oprot.writeFieldBegin('sample_time', TType.I64, 2)
      oprot.writeI64(self.sample_time)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 3)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.real_time is not None:
      oprot.writeFieldBegin('real_time', TType.I64, 4)
      oprot.writeI64(self.real_time)
      oprot.writeFieldEnd()
    if self.live_time is not None:
      oprot.writeFieldBegin('live_time', TType.I64, 5)
      oprot.writeI64(self.live_time)
      oprot.writeFieldEnd()
    if self.adc_channel_counts is not None:
      oprot.writeFieldBegin('adc_channel_counts', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.adc_channel_counts))
      for iter12 in self.adc_channel_counts:
        oprot.writeI32(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bin_energies is not None:
      oprot.writeFieldBegin('bin_energies', TType.LIST, 7)
      oprot.writeListBegin(TType.DOUBLE, len(self.bin_energies))
      for iter13 in self.bin_energies:
        oprot.writeDouble(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.sample_time)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.real_time)
    value = (value * 31) ^ hash(self.live_time)
    value = (value * 31) ^ hash(self.adc_channel_counts)
    value = (value * 31) ^ hash(self.bin_energies)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RadiationSensorSettings:
  """
  Attributes:
   - sensor_id
   - high_voltage
   - fine_gain
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sensor_id', None, None, ), # 1
    (2, TType.DOUBLE, 'high_voltage', None, None, ), # 2
    (3, TType.DOUBLE, 'fine_gain', None, None, ), # 3
  )

  def __init__(self, sensor_id=None, high_voltage=None, fine_gain=None,):
    self.sensor_id = sensor_id
    self.high_voltage = high_voltage
    self.fine_gain = fine_gain

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.high_voltage = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.fine_gain = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RadiationSensorSettings')
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 1)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.high_voltage is not None:
      oprot.writeFieldBegin('high_voltage', TType.DOUBLE, 2)
      oprot.writeDouble(self.high_voltage)
      oprot.writeFieldEnd()
    if self.fine_gain is not None:
      oprot.writeFieldBegin('fine_gain', TType.DOUBLE, 3)
      oprot.writeDouble(self.fine_gain)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.high_voltage)
    value = (value * 31) ^ hash(self.fine_gain)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RadiationSensorReport:
  """
  Attributes:
   - stype
   - sensor_ids
   - sensor_spectra
   - sensor_settings
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'stype', None,     1, ), # 1
    (2, TType.LIST, 'sensor_ids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'sensor_spectra', (TType.STRUCT,(Spectrum, Spectrum.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'sensor_settings', (TType.STRUCT,(RadiationSensorSettings, RadiationSensorSettings.thrift_spec)), None, ), # 4
  )

  def __init__(self, stype=thrift_spec[1][4], sensor_ids=None, sensor_spectra=None, sensor_settings=None,):
    self.stype = stype
    self.sensor_ids = sensor_ids
    self.sensor_spectra = sensor_spectra
    self.sensor_settings = sensor_settings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.stype = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sensor_ids = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString()
            self.sensor_ids.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.sensor_spectra = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = Spectrum()
            _elem25.read(iprot)
            self.sensor_spectra.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.sensor_settings = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = RadiationSensorSettings()
            _elem31.read(iprot)
            self.sensor_settings.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RadiationSensorReport')
    if self.stype is not None:
      oprot.writeFieldBegin('stype', TType.I32, 1)
      oprot.writeI32(self.stype)
      oprot.writeFieldEnd()
    if self.sensor_ids is not None:
      oprot.writeFieldBegin('sensor_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.sensor_ids))
      for iter32 in self.sensor_ids:
        oprot.writeString(iter32)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sensor_spectra is not None:
      oprot.writeFieldBegin('sensor_spectra', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.sensor_spectra))
      for iter33 in self.sensor_spectra:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sensor_settings is not None:
      oprot.writeFieldBegin('sensor_settings', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.sensor_settings))
      for iter34 in self.sensor_settings:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stype)
    value = (value * 31) ^ hash(self.sensor_ids)
    value = (value * 31) ^ hash(self.sensor_spectra)
    value = (value * 31) ^ hash(self.sensor_settings)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
