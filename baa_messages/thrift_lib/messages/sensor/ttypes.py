#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SensorType:
  RADIATION = 1
  TEMPERATURE = 2
  GPS = 3

  _VALUES_TO_NAMES = {
    1: "RADIATION",
    2: "TEMPERATURE",
    3: "GPS",
  }

  _NAMES_TO_VALUES = {
    "RADIATION": 1,
    "TEMPERATURE": 2,
    "GPS": 3,
  }


class GPSReading:
  """
  Attributes:
   - sensor_id
   - timestamp
   - latitude
   - longitude
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sensor_id', None, None, ), # 1
    (2, TType.DOUBLE, 'timestamp', None, None, ), # 2
    (3, TType.DOUBLE, 'latitude', None, None, ), # 3
    (4, TType.DOUBLE, 'longitude', None, None, ), # 4
  )

  def __init__(self, sensor_id=None, timestamp=None, latitude=None, longitude=None,):
    self.sensor_id = sensor_id
    self.timestamp = timestamp
    self.latitude = latitude
    self.longitude = longitude

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.timestamp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GPSReading')
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 1)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.DOUBLE, 2)
      oprot.writeDouble(self.timestamp)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 4)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sensor_id is None:
      raise TProtocol.TProtocolException(message='Required field sensor_id is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.latitude is None:
      raise TProtocol.TProtocolException(message='Required field latitude is unset!')
    if self.longitude is None:
      raise TProtocol.TProtocolException(message='Required field longitude is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TemperatureReading:
  """
  Attributes:
   - timestamp
   - temperature
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'timestamp', None, None, ), # 1
    (2, TType.DOUBLE, 'temperature', None, None, ), # 2
  )

  def __init__(self, timestamp=None, temperature=None,):
    self.timestamp = timestamp
    self.temperature = temperature

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.timestamp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.temperature = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TemperatureReading')
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.DOUBLE, 1)
      oprot.writeDouble(self.timestamp)
      oprot.writeFieldEnd()
    if self.temperature is not None:
      oprot.writeFieldBegin('temperature', TType.DOUBLE, 2)
      oprot.writeDouble(self.temperature)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.temperature is None:
      raise TProtocol.TProtocolException(message='Required field temperature is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.temperature)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GammaReading:
  """
  Attributes:
   - start_time
   - duration
   - live_time
   - adc_channel_counts
   - bin_energies
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'start_time', None, None, ), # 1
    (2, TType.DOUBLE, 'duration', None, None, ), # 2
    (3, TType.DOUBLE, 'live_time', None, None, ), # 3
    (4, TType.LIST, 'adc_channel_counts', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'bin_energies', (TType.DOUBLE,None), None, ), # 5
  )

  def __init__(self, start_time=None, duration=None, live_time=None, adc_channel_counts=None, bin_energies=None,):
    self.start_time = start_time
    self.duration = duration
    self.live_time = live_time
    self.adc_channel_counts = adc_channel_counts
    self.bin_energies = bin_energies

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.start_time = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.duration = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.live_time = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.adc_channel_counts = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.adc_channel_counts.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.bin_energies = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readDouble()
            self.bin_energies.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GammaReading')
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.DOUBLE, 1)
      oprot.writeDouble(self.start_time)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.DOUBLE, 2)
      oprot.writeDouble(self.duration)
      oprot.writeFieldEnd()
    if self.live_time is not None:
      oprot.writeFieldBegin('live_time', TType.DOUBLE, 3)
      oprot.writeDouble(self.live_time)
      oprot.writeFieldEnd()
    if self.adc_channel_counts is not None:
      oprot.writeFieldBegin('adc_channel_counts', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.adc_channel_counts))
      for iter12 in self.adc_channel_counts:
        oprot.writeI32(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bin_energies is not None:
      oprot.writeFieldBegin('bin_energies', TType.LIST, 5)
      oprot.writeListBegin(TType.DOUBLE, len(self.bin_energies))
      for iter13 in self.bin_energies:
        oprot.writeDouble(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.start_time is None:
      raise TProtocol.TProtocolException(message='Required field start_time is unset!')
    if self.duration is None:
      raise TProtocol.TProtocolException(message='Required field duration is unset!')
    if self.live_time is None:
      raise TProtocol.TProtocolException(message='Required field live_time is unset!')
    if self.adc_channel_counts is None:
      raise TProtocol.TProtocolException(message='Required field adc_channel_counts is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.duration)
    value = (value * 31) ^ hash(self.live_time)
    value = (value * 31) ^ hash(self.adc_channel_counts)
    value = (value * 31) ^ hash(self.bin_energies)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeutronReading:
  """
  Attributes:
   - counts
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'counts', None, None, ), # 1
  )

  def __init__(self, counts=None,):
    self.counts = counts

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.counts = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeutronReading')
    if self.counts is not None:
      oprot.writeFieldBegin('counts', TType.DOUBLE, 1)
      oprot.writeDouble(self.counts)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.counts is None:
      raise TProtocol.TProtocolException(message='Required field counts is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.counts)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorReading:
  """
  Attributes:
   - gps
   - temp
   - gamma
   - neutron
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gps', (GPSReading, GPSReading.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'temp', (TemperatureReading, TemperatureReading.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gamma', (GammaReading, GammaReading.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'neutron', (NeutronReading, NeutronReading.thrift_spec), None, ), # 4
  )

  def __init__(self, gps=None, temp=None, gamma=None, neutron=None,):
    self.gps = gps
    self.temp = temp
    self.gamma = gamma
    self.neutron = neutron

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gps = GPSReading()
          self.gps.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.temp = TemperatureReading()
          self.temp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gamma = GammaReading()
          self.gamma.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.neutron = NeutronReading()
          self.neutron.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorReading')
    if self.gps is not None:
      oprot.writeFieldBegin('gps', TType.STRUCT, 1)
      self.gps.write(oprot)
      oprot.writeFieldEnd()
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.STRUCT, 2)
      self.temp.write(oprot)
      oprot.writeFieldEnd()
    if self.gamma is not None:
      oprot.writeFieldBegin('gamma', TType.STRUCT, 3)
      self.gamma.write(oprot)
      oprot.writeFieldEnd()
    if self.neutron is not None:
      oprot.writeFieldBegin('neutron', TType.STRUCT, 4)
      self.neutron.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gps)
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.gamma)
    value = (value * 31) ^ hash(self.neutron)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorReadingReport:
  """
  Attributes:
   - sensor_id
   - timestamp
   - sensor_type
   - sensor_reading
   - sensor_unit_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sensor_id', None, None, ), # 1
    (2, TType.DOUBLE, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'sensor_type', None, None, ), # 3
    (4, TType.STRUCT, 'sensor_reading', (SensorReading, SensorReading.thrift_spec), None, ), # 4
    (5, TType.STRING, 'sensor_unit_id', None, None, ), # 5
  )

  def __init__(self, sensor_id=None, timestamp=None, sensor_type=None, sensor_reading=None, sensor_unit_id=None,):
    self.sensor_id = sensor_id
    self.timestamp = timestamp
    self.sensor_type = sensor_type
    self.sensor_reading = sensor_reading
    self.sensor_unit_id = sensor_unit_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.timestamp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sensor_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.sensor_reading = SensorReading()
          self.sensor_reading.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sensor_unit_id = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorReadingReport')
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 1)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.DOUBLE, 2)
      oprot.writeDouble(self.timestamp)
      oprot.writeFieldEnd()
    if self.sensor_type is not None:
      oprot.writeFieldBegin('sensor_type', TType.I32, 3)
      oprot.writeI32(self.sensor_type)
      oprot.writeFieldEnd()
    if self.sensor_reading is not None:
      oprot.writeFieldBegin('sensor_reading', TType.STRUCT, 4)
      self.sensor_reading.write(oprot)
      oprot.writeFieldEnd()
    if self.sensor_unit_id is not None:
      oprot.writeFieldBegin('sensor_unit_id', TType.STRING, 5)
      oprot.writeString(self.sensor_unit_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sensor_id is None:
      raise TProtocol.TProtocolException(message='Required field sensor_id is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.sensor_type is None:
      raise TProtocol.TProtocolException(message='Required field sensor_type is unset!')
    if self.sensor_reading is None:
      raise TProtocol.TProtocolException(message='Required field sensor_reading is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.sensor_type)
    value = (value * 31) ^ hash(self.sensor_reading)
    value = (value * 31) ^ hash(self.sensor_unit_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GPSSetting:
  """
  Attributes:
   - sample_frequency
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'sample_frequency', None, None, ), # 1
  )

  def __init__(self, sample_frequency=None,):
    self.sample_frequency = sample_frequency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.sample_frequency = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GPSSetting')
    if self.sample_frequency is not None:
      oprot.writeFieldBegin('sample_frequency', TType.DOUBLE, 1)
      oprot.writeDouble(self.sample_frequency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sample_frequency)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TemperatureSetting:
  """
  Attributes:
   - sample_frequency
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'sample_frequency', None, None, ), # 1
  )

  def __init__(self, sample_frequency=None,):
    self.sample_frequency = sample_frequency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.sample_frequency = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TemperatureSetting')
    if self.sample_frequency is not None:
      oprot.writeFieldBegin('sample_frequency', TType.DOUBLE, 1)
      oprot.writeDouble(self.sample_frequency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sample_frequency)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GammaSetting:
  """
  Attributes:
   - sample_frequency
   - fine_gain
   - high_voltage
   - lld
   - uld
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'sample_frequency', None, None, ), # 1
    (2, TType.DOUBLE, 'fine_gain', None, None, ), # 2
    (3, TType.DOUBLE, 'high_voltage', None, None, ), # 3
    (4, TType.DOUBLE, 'lld', None, None, ), # 4
    (5, TType.DOUBLE, 'uld', None, None, ), # 5
  )

  def __init__(self, sample_frequency=None, fine_gain=None, high_voltage=None, lld=None, uld=None,):
    self.sample_frequency = sample_frequency
    self.fine_gain = fine_gain
    self.high_voltage = high_voltage
    self.lld = lld
    self.uld = uld

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.sample_frequency = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.fine_gain = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.high_voltage = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.lld = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.uld = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GammaSetting')
    if self.sample_frequency is not None:
      oprot.writeFieldBegin('sample_frequency', TType.DOUBLE, 1)
      oprot.writeDouble(self.sample_frequency)
      oprot.writeFieldEnd()
    if self.fine_gain is not None:
      oprot.writeFieldBegin('fine_gain', TType.DOUBLE, 2)
      oprot.writeDouble(self.fine_gain)
      oprot.writeFieldEnd()
    if self.high_voltage is not None:
      oprot.writeFieldBegin('high_voltage', TType.DOUBLE, 3)
      oprot.writeDouble(self.high_voltage)
      oprot.writeFieldEnd()
    if self.lld is not None:
      oprot.writeFieldBegin('lld', TType.DOUBLE, 4)
      oprot.writeDouble(self.lld)
      oprot.writeFieldEnd()
    if self.uld is not None:
      oprot.writeFieldBegin('uld', TType.DOUBLE, 5)
      oprot.writeDouble(self.uld)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sample_frequency)
    value = (value * 31) ^ hash(self.fine_gain)
    value = (value * 31) ^ hash(self.high_voltage)
    value = (value * 31) ^ hash(self.lld)
    value = (value * 31) ^ hash(self.uld)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NeutronSetting:
  """
  Attributes:
   - sample_frequency
   - voltage
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'sample_frequency', None, None, ), # 1
    (2, TType.DOUBLE, 'voltage', None, None, ), # 2
  )

  def __init__(self, sample_frequency=None, voltage=None,):
    self.sample_frequency = sample_frequency
    self.voltage = voltage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.sample_frequency = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.voltage = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NeutronSetting')
    if self.sample_frequency is not None:
      oprot.writeFieldBegin('sample_frequency', TType.DOUBLE, 1)
      oprot.writeDouble(self.sample_frequency)
      oprot.writeFieldEnd()
    if self.voltage is not None:
      oprot.writeFieldBegin('voltage', TType.DOUBLE, 2)
      oprot.writeDouble(self.voltage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sample_frequency)
    value = (value * 31) ^ hash(self.voltage)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorSetting:
  """
  Attributes:
   - gps
   - temp
   - gamma
   - neutron
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gps', (GPSSetting, GPSSetting.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'temp', (TemperatureSetting, TemperatureSetting.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gamma', (GammaSetting, GammaSetting.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'neutron', (NeutronSetting, NeutronSetting.thrift_spec), None, ), # 4
  )

  def __init__(self, gps=None, temp=None, gamma=None, neutron=None,):
    self.gps = gps
    self.temp = temp
    self.gamma = gamma
    self.neutron = neutron

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gps = GPSSetting()
          self.gps.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.temp = TemperatureSetting()
          self.temp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gamma = GammaSetting()
          self.gamma.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.neutron = NeutronSetting()
          self.neutron.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorSetting')
    if self.gps is not None:
      oprot.writeFieldBegin('gps', TType.STRUCT, 1)
      self.gps.write(oprot)
      oprot.writeFieldEnd()
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.STRUCT, 2)
      self.temp.write(oprot)
      oprot.writeFieldEnd()
    if self.gamma is not None:
      oprot.writeFieldBegin('gamma', TType.STRUCT, 3)
      self.gamma.write(oprot)
      oprot.writeFieldEnd()
    if self.neutron is not None:
      oprot.writeFieldBegin('neutron', TType.STRUCT, 4)
      self.neutron.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gps)
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.gamma)
    value = (value * 31) ^ hash(self.neutron)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorSettingReport:
  """
  Attributes:
   - sensor_id
   - timestamp
   - sensor_type
   - sensor_setting
   - sensor_unit_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sensor_id', None, None, ), # 1
    (2, TType.DOUBLE, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'sensor_type', None, None, ), # 3
    (4, TType.STRUCT, 'sensor_setting', (SensorReading, SensorReading.thrift_spec), None, ), # 4
    (5, TType.STRING, 'sensor_unit_id', None, None, ), # 5
  )

  def __init__(self, sensor_id=None, timestamp=None, sensor_type=None, sensor_setting=None, sensor_unit_id=None,):
    self.sensor_id = sensor_id
    self.timestamp = timestamp
    self.sensor_type = sensor_type
    self.sensor_setting = sensor_setting
    self.sensor_unit_id = sensor_unit_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.timestamp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sensor_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.sensor_setting = SensorReading()
          self.sensor_setting.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sensor_unit_id = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorSettingReport')
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 1)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.DOUBLE, 2)
      oprot.writeDouble(self.timestamp)
      oprot.writeFieldEnd()
    if self.sensor_type is not None:
      oprot.writeFieldBegin('sensor_type', TType.I32, 3)
      oprot.writeI32(self.sensor_type)
      oprot.writeFieldEnd()
    if self.sensor_setting is not None:
      oprot.writeFieldBegin('sensor_setting', TType.STRUCT, 4)
      self.sensor_setting.write(oprot)
      oprot.writeFieldEnd()
    if self.sensor_unit_id is not None:
      oprot.writeFieldBegin('sensor_unit_id', TType.STRING, 5)
      oprot.writeString(self.sensor_unit_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sensor_id is None:
      raise TProtocol.TProtocolException(message='Required field sensor_id is unset!')
    if self.timestamp is None:
      raise TProtocol.TProtocolException(message='Required field timestamp is unset!')
    if self.sensor_type is None:
      raise TProtocol.TProtocolException(message='Required field sensor_type is unset!')
    if self.sensor_setting is None:
      raise TProtocol.TProtocolException(message='Required field sensor_setting is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.sensor_type)
    value = (value * 31) ^ hash(self.sensor_setting)
    value = (value * 31) ^ hash(self.sensor_unit_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
