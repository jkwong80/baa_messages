#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import baa_messages.messages.core.ttypes
import baa_messages.messages.sensor.gps.ttypes
import baa_messages.messages.sensor.gamma.ttypes
import baa_messages.messages.sensor.neutron.ttypes
import baa_messages.messages.sensor.temperature.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Reading:
  """
  Attributes:
   - gps
   - temperature
   - gamma
   - neutron
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gps', (baa_messages.messages.sensor.gps.ttypes.Reading, baa_messages.messages.sensor.gps.ttypes.Reading.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'temperature', (baa_messages.messages.sensor.temperature.ttypes.Reading, baa_messages.messages.sensor.temperature.ttypes.Reading.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gamma', (baa_messages.messages.sensor.gamma.ttypes.Reading, baa_messages.messages.sensor.gamma.ttypes.Reading.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'neutron', (baa_messages.messages.sensor.neutron.ttypes.Reading, baa_messages.messages.sensor.neutron.ttypes.Reading.thrift_spec), None, ), # 4
  )

  def __init__(self, gps=None, temperature=None, gamma=None, neutron=None,):
    self.gps = gps
    self.temperature = temperature
    self.gamma = gamma
    self.neutron = neutron

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gps = baa_messages.messages.sensor.gps.ttypes.Reading()
          self.gps.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.temperature = baa_messages.messages.sensor.temperature.ttypes.Reading()
          self.temperature.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gamma = baa_messages.messages.sensor.gamma.ttypes.Reading()
          self.gamma.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.neutron = baa_messages.messages.sensor.neutron.ttypes.Reading()
          self.neutron.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Reading')
    if self.gps is not None:
      oprot.writeFieldBegin('gps', TType.STRUCT, 1)
      self.gps.write(oprot)
      oprot.writeFieldEnd()
    if self.temperature is not None:
      oprot.writeFieldBegin('temperature', TType.STRUCT, 2)
      self.temperature.write(oprot)
      oprot.writeFieldEnd()
    if self.gamma is not None:
      oprot.writeFieldBegin('gamma', TType.STRUCT, 3)
      self.gamma.write(oprot)
      oprot.writeFieldEnd()
    if self.neutron is not None:
      oprot.writeFieldBegin('neutron', TType.STRUCT, 4)
      self.neutron.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gps)
    value = (value * 31) ^ hash(self.temperature)
    value = (value * 31) ^ hash(self.gamma)
    value = (value * 31) ^ hash(self.neutron)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorReading:
  """
  Attributes:
   - context
   - reading
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'context', (baa_messages.messages.core.ttypes.BAAContext, baa_messages.messages.core.ttypes.BAAContext.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'reading', (Reading, Reading.thrift_spec), None, ), # 2
  )

  def __init__(self, context=None, reading=None,):
    self.context = context
    self.reading = reading

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.context = baa_messages.messages.core.ttypes.BAAContext()
          self.context.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reading = Reading()
          self.reading.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorReading')
    if self.context is not None:
      oprot.writeFieldBegin('context', TType.STRUCT, 1)
      self.context.write(oprot)
      oprot.writeFieldEnd()
    if self.reading is not None:
      oprot.writeFieldBegin('reading', TType.STRUCT, 2)
      self.reading.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.context is None:
      raise TProtocol.TProtocolException(message='Required field context is unset!')
    if self.reading is None:
      raise TProtocol.TProtocolException(message='Required field reading is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.context)
    value = (value * 31) ^ hash(self.reading)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Setting:
  """
  Attributes:
   - gps
   - temp
   - gamma
   - neutron
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'gps', (baa_messages.messages.sensor.gps.ttypes.Setting, baa_messages.messages.sensor.gps.ttypes.Setting.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'temp', (baa_messages.messages.sensor.temperature.ttypes.Setting, baa_messages.messages.sensor.temperature.ttypes.Setting.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'gamma', (baa_messages.messages.sensor.gamma.ttypes.Setting, baa_messages.messages.sensor.gamma.ttypes.Setting.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'neutron', (baa_messages.messages.sensor.neutron.ttypes.Setting, baa_messages.messages.sensor.neutron.ttypes.Setting.thrift_spec), None, ), # 4
  )

  def __init__(self, gps=None, temp=None, gamma=None, neutron=None,):
    self.gps = gps
    self.temp = temp
    self.gamma = gamma
    self.neutron = neutron

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.gps = baa_messages.messages.sensor.gps.ttypes.Setting()
          self.gps.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.temp = baa_messages.messages.sensor.temperature.ttypes.Setting()
          self.temp.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.gamma = baa_messages.messages.sensor.gamma.ttypes.Setting()
          self.gamma.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.neutron = baa_messages.messages.sensor.neutron.ttypes.Setting()
          self.neutron.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Setting')
    if self.gps is not None:
      oprot.writeFieldBegin('gps', TType.STRUCT, 1)
      self.gps.write(oprot)
      oprot.writeFieldEnd()
    if self.temp is not None:
      oprot.writeFieldBegin('temp', TType.STRUCT, 2)
      self.temp.write(oprot)
      oprot.writeFieldEnd()
    if self.gamma is not None:
      oprot.writeFieldBegin('gamma', TType.STRUCT, 3)
      self.gamma.write(oprot)
      oprot.writeFieldEnd()
    if self.neutron is not None:
      oprot.writeFieldBegin('neutron', TType.STRUCT, 4)
      self.neutron.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.gps)
    value = (value * 31) ^ hash(self.temp)
    value = (value * 31) ^ hash(self.gamma)
    value = (value * 31) ^ hash(self.neutron)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorSetting:
  """
  Attributes:
   - context
   - setting
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'context', (baa_messages.messages.core.ttypes.BAAContext, baa_messages.messages.core.ttypes.BAAContext.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'setting', (Setting, Setting.thrift_spec), None, ), # 2
  )

  def __init__(self, context=None, setting=None,):
    self.context = context
    self.setting = setting

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.context = baa_messages.messages.core.ttypes.BAAContext()
          self.context.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.setting = Setting()
          self.setting.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorSetting')
    if self.context is not None:
      oprot.writeFieldBegin('context', TType.STRUCT, 1)
      self.context.write(oprot)
      oprot.writeFieldEnd()
    if self.setting is not None:
      oprot.writeFieldBegin('setting', TType.STRUCT, 2)
      self.setting.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.context is None:
      raise TProtocol.TProtocolException(message='Required field context is unset!')
    if self.setting is None:
      raise TProtocol.TProtocolException(message='Required field setting is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.context)
    value = (value * 31) ^ hash(self.setting)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SensorReport:
  """
  Attributes:
   - context
   - readings
   - settings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'context', (baa_messages.messages.core.ttypes.BAAContext, baa_messages.messages.core.ttypes.BAAContext.thrift_spec), None, ), # 1
    (2, TType.LIST, 'readings', (TType.STRUCT,(SensorReading, SensorReading.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'settings', (TType.STRUCT,(SensorSetting, SensorSetting.thrift_spec)), None, ), # 3
  )

  def __init__(self, context=None, readings=None, settings=None,):
    self.context = context
    self.readings = readings
    self.settings = settings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.context = baa_messages.messages.core.ttypes.BAAContext()
          self.context.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.readings = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = SensorReading()
            _elem5.read(iprot)
            self.readings.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.settings = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = SensorSetting()
            _elem11.read(iprot)
            self.settings.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SensorReport')
    if self.context is not None:
      oprot.writeFieldBegin('context', TType.STRUCT, 1)
      self.context.write(oprot)
      oprot.writeFieldEnd()
    if self.readings is not None:
      oprot.writeFieldBegin('readings', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.readings))
      for iter12 in self.readings:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.settings is not None:
      oprot.writeFieldBegin('settings', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.settings))
      for iter13 in self.settings:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.context is None:
      raise TProtocol.TProtocolException(message='Required field context is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.context)
    value = (value * 31) ^ hash(self.readings)
    value = (value * 31) ^ hash(self.settings)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
