#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class GolfReading:
  """
  Attributes:
   - metric
   - sensor_id
   - message_id
   - fg_counts
   - fg_times
   - bg_counts
   - bg_times
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'metric', None, None, ), # 1
    (2, TType.STRING, 'sensor_id', None, None, ), # 2
    (3, TType.STRING, 'message_id', None, None, ), # 3
    (4, TType.LIST, 'fg_counts', (TType.I32,None), None, ), # 4
    (5, TType.LIST, 'fg_times', (TType.DOUBLE,None), None, ), # 5
    (6, TType.LIST, 'bg_counts', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'bg_times', (TType.DOUBLE,None), None, ), # 7
  )

  def __init__(self, metric=None, sensor_id=None, message_id=None, fg_counts=None, fg_times=None, bg_counts=None, bg_times=None,):
    self.metric = metric
    self.sensor_id = sensor_id
    self.message_id = message_id
    self.fg_counts = fg_counts
    self.fg_times = fg_times
    self.bg_counts = bg_counts
    self.bg_times = bg_times

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.metric = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sensor_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.message_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.fg_counts = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.fg_counts.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.fg_times = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readDouble()
            self.fg_times.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.bg_counts = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI32()
            self.bg_counts.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.bg_times = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readDouble()
            self.bg_times.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GolfReading')
    if self.metric is not None:
      oprot.writeFieldBegin('metric', TType.DOUBLE, 1)
      oprot.writeDouble(self.metric)
      oprot.writeFieldEnd()
    if self.sensor_id is not None:
      oprot.writeFieldBegin('sensor_id', TType.STRING, 2)
      oprot.writeString(self.sensor_id)
      oprot.writeFieldEnd()
    if self.message_id is not None:
      oprot.writeFieldBegin('message_id', TType.STRING, 3)
      oprot.writeString(self.message_id)
      oprot.writeFieldEnd()
    if self.fg_counts is not None:
      oprot.writeFieldBegin('fg_counts', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.fg_counts))
      for iter24 in self.fg_counts:
        oprot.writeI32(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fg_times is not None:
      oprot.writeFieldBegin('fg_times', TType.LIST, 5)
      oprot.writeListBegin(TType.DOUBLE, len(self.fg_times))
      for iter25 in self.fg_times:
        oprot.writeDouble(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bg_counts is not None:
      oprot.writeFieldBegin('bg_counts', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.bg_counts))
      for iter26 in self.bg_counts:
        oprot.writeI32(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.bg_times is not None:
      oprot.writeFieldBegin('bg_times', TType.LIST, 7)
      oprot.writeListBegin(TType.DOUBLE, len(self.bg_times))
      for iter27 in self.bg_times:
        oprot.writeDouble(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.metric is None:
      raise TProtocol.TProtocolException(message='Required field metric is unset!')
    if self.sensor_id is None:
      raise TProtocol.TProtocolException(message='Required field sensor_id is unset!')
    if self.message_id is None:
      raise TProtocol.TProtocolException(message='Required field message_id is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.metric)
    value = (value * 31) ^ hash(self.sensor_id)
    value = (value * 31) ^ hash(self.message_id)
    value = (value * 31) ^ hash(self.fg_counts)
    value = (value * 31) ^ hash(self.fg_times)
    value = (value * 31) ^ hash(self.bg_counts)
    value = (value * 31) ^ hash(self.bg_times)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GolfSetting:
  """
  Attributes:
   - threshold
   - scale
   - num_fg_samples
   - num_bg_samples
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'threshold', None, None, ), # 1
    (2, TType.STRING, 'scale', None, None, ), # 2
    (3, TType.I32, 'num_fg_samples', None, None, ), # 3
    (4, TType.I32, 'num_bg_samples', None, None, ), # 4
  )

  def __init__(self, threshold=None, scale=None, num_fg_samples=None, num_bg_samples=None,):
    self.threshold = threshold
    self.scale = scale
    self.num_fg_samples = num_fg_samples
    self.num_bg_samples = num_bg_samples

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.threshold = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.scale = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num_fg_samples = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.num_bg_samples = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GolfSetting')
    if self.threshold is not None:
      oprot.writeFieldBegin('threshold', TType.DOUBLE, 1)
      oprot.writeDouble(self.threshold)
      oprot.writeFieldEnd()
    if self.scale is not None:
      oprot.writeFieldBegin('scale', TType.STRING, 2)
      oprot.writeString(self.scale)
      oprot.writeFieldEnd()
    if self.num_fg_samples is not None:
      oprot.writeFieldBegin('num_fg_samples', TType.I32, 3)
      oprot.writeI32(self.num_fg_samples)
      oprot.writeFieldEnd()
    if self.num_bg_samples is not None:
      oprot.writeFieldBegin('num_bg_samples', TType.I32, 4)
      oprot.writeI32(self.num_bg_samples)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.threshold)
    value = (value * 31) ^ hash(self.scale)
    value = (value * 31) ^ hash(self.num_fg_samples)
    value = (value * 31) ^ hash(self.num_bg_samples)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
